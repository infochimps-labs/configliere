#!/usr/bin/env ruby
$: << File.dirname(__FILE__)+'/../lib'
require 'configliere'

Settings.use :commands

Settings.description =  %Q{Client for the configliere gem: manipulate configuration and passwords for automated scripts}

Settings.define_command :dump,    :description => "Show the whole contents of the file"
Settings.define_command :list,    :description => "Show all params in the configliere file."
Settings.define_command :get,     :description => "show values given as commandline args, eg: #{File.basename($0)} get this that"
Settings.define_command :set,     :description => "sets values given as commandline args, eg: #{File.basename($0)} set this=1 that=3"
Settings.define_command :delete,  :description => "sets values given as commandline args, eg: #{File.basename($0)} delete this that"
Settings.define_command :encrypt, :description => "encrypt the param"
Settings.define_command :decrypt, :description => "Store the param as decrypted back into the file. Can be undone with 'encrypt'."

Settings.define :from,   :flag => 'f', :type => :filename, :description => "Configliere config file to load"
Settings.define :into,   :flag => 'i', :type => :filename, :description => "Configliere config file to save into"

Settings.resolve!
ARGV.replace []

Store = Configliere.new
Store.read(Settings.from) if Settings.from

#
# Execute
#

case Settings.command_name
when :dump
  puts Store.to_hash.to_yaml

when :list
  $stderr.puts "Param names in #{Settings.from}:"
  Store.each do |attr, val|
    puts "  #{attr}"
  end

when :get
  $stderr.puts "Values for #{Settings.rest.join(", ")} from #{Settings.from}"
  Settings.rest.map(&:to_sym).each do |attr|
    puts "%-23s\t%s" % ["#{attr}:", Store[attr]]
  end

when :set
  $stderr.puts "Setting #{Settings.rest.join(", ")} for #{Settings.from}"
  Settings.rest.each do |attr_val|
    attr, val = attr_val.split('=', 2)
    attr = attr.to_sym
    if val.nil? then warn "Please specify a value for #{attr}" ; next ; end
    Store[attr] = val

    puts "%-23s\t%s" % ["#{attr}:", val.inspect]
  end

when :delete
  $stderr.puts "Deleting #{Settings.rest.join(", ")} from #{Settings.from}. O, I die, Horatio."
  Settings.rest.map(&:to_sym).each do |attr|
    Store.delete(attr)
  end

when :encrypt
  Store.use :encrypted
  $stderr.puts "Encrypting #{Settings.rest.join(", ")} from #{Settings.from}. Fnord"
  Settings.rest.each{|attr| Store.define attr, :encrypted => true }
  Store.encrypt_pass = Settings.encrypt_pass || Settings[:encrypt_pass]
  Store.resolve!

when :decrypt
  Store.use :encrypted
  $stderr.puts "Decrypting #{Settings.rest.join(", ")} from #{Settings.from}. Fnord"
  Settings.rest.each{|attr| Store.define attr, :encrypted => true }
  Store.encrypt_pass = Settings.encrypt_pass || Settings[:encrypt_pass]
  Store.resolve!

  puts Store.to_hash.to_yaml

else
  Settings.die "Please use one of the given commands"
end

if Settings.into
  Store.save!(Settings.into)
end
